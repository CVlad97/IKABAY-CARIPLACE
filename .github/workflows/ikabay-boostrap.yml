name: IKABAY Bootstrap
on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  patch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Create/Update files (idempotent)
        run: |
          set -e

          echo "== 1) Fix routes duplicates scripts =="
          mkdir -p scripts
          cat > scripts/fix_routes.sh << 'EOF'
          #!/usr/bin/env bash
          set -e
          b="app/[locale]"
          # Jeux
          if [ -d "$b/jeux" ] && [ -d "$b/(store)/jeux" ]; then
            echo "[fix] Duplicate /jeux → keep (store)/jeux"
            rm -rf "$b/jeux"
          fi
          # Cart
          if [ -d "$b/cart" ] && [ -d "$b/(store)/cart" ]; then
            echo "[fix] Duplicate /cart → keep (store)/cart"
            rm -rf "$b/cart"
          fi
          # Checkout
          if [ -d "$b/checkout" ] && [ -d "$b/(store)/checkout" ]; then
            echo "[fix] Duplicate /checkout → keep (store)/checkout"
            rm -rf "$b/checkout"
          fi
          EOF
          chmod +x scripts/fix_routes.sh
          bash scripts/fix_routes.sh || true

          echo "== 2) Components: PriceDomModes + OriginBadge =="
          mkdir -p components/marketplace
          cat > components/marketplace/PriceDomModes.tsx << 'EOF'
          "use client";
          import React,{useState} from "react";
          type Props={ basePrice:number; onMode?:(m:string)=>void };
          const modes=[
            {key:"express_relais",label:"Express Relais",coef:1.00},
            {key:"express_domicile",label:"Express Domicile",coef:1.05},
            {key:"maritime_relais",label:"Maritime Relais",coef:0.92},
            {key:"maritime_domicile",label:"Maritime Domicile",coef:0.97},
          ];
          export default function PriceDomModes({basePrice,onMode}:Props){
            const [m,setM]=useState(modes[0].key);
            const cur=modes.find(x=>x.key===m)!;
            const price=(basePrice*cur.coef).toFixed(2);
            return(<div className="space-y-2">
              <div className="flex gap-2 flex-wrap">
                {modes.map(x=>(
                  <button key={x.key}
                    onClick={()=>{setM(x.key);onMode?.(x.key);}}
                    className={`px-3 py-1 rounded border ${m===x.key?"bg-emerald-600 text-white":"bg-white"}`}>
                    {x.label}
                  </button>
                ))}
              </div>
              <div className="text-sm text-gray-700">Prix <b>Rendu Martinique</b> : <b>{price} €</b></div>
            </div>);
          }
          EOF

          cat > components/marketplace/OriginBadge.tsx << 'EOF'
          export default function OriginBadge({origin}:{origin?: "Local"|"Import"}){
            const isLocal=origin==="Local";
            return(
              <span className={`inline-block text-xs px-2 py-0.5 rounded ${isLocal?"bg-green-100 text-green-700":"bg-blue-100 text-blue-700"}`}>
                {isLocal?"LOCAL":"IMPORT"}
              </span>
            );
          }
          EOF

          echo "== 3) Create key pages if missing =="
          mkpage () {
            p="$1"
            if [ ! -f "$p/page.tsx" ] && [ ! -f "$p/page.jsx" ]; then
              mkdir -p "$p"
              cat > "$p/page.tsx" <<EOF
          export default function Page(){
            return (
              <main className="p-6 space-y-4">
                <h1 className="text-2xl font-bold">$(basename $p)</h1>
                <p>Section initiale prête. Complétez le contenu si besoin.</p>
              </main>
            );
          }
          EOF
              echo "[create] $p/page.tsx"
            fi
          }
          mkpage "app/[locale]/ultrasourcing"
          mkpage "app/[locale]/shipin"
          mkpage "app/[locale]/services/new"
          mkpage "app/[locale]/emploi"
          mkpage "app/[locale]/emploi/candidater"
          mkpage "app/[locale]/earn"
          mkpage "app/[locale]/jeux"
          mkpage "app/[locale]/sos"

          echo "== 4) Minimal APIs (fallback) =="
          mmk () { mkdir -p "$(dirname "$1")"; }
          # ultrasourcing
          mmk app/api/ultrasourcing/request/route.ts
          cat > app/api/ultrasourcing/request/route.ts << 'EOF'
          import { NextResponse } from "next/server";
          export async function POST(req: Request) {
            try {
              const body = await req.json();
              // TODO: if Supabase configured, insert in ultrasourcing_requests
              return NextResponse.json({ ok: true, ref: `ULTRA-${Date.now()}` });
            } catch (e:any) {
              return NextResponse.json({ ok:false, error:e?.message||"bad" }, { status:400 });
            }
          }
          EOF
          # shipin
          mmk app/api/shipin/create/route.ts
          cat > app/api/shipin/create/route.ts << 'EOF'
          import { NextResponse } from "next/server";
          export async function POST(req: Request) {
            try {
              const body = await req.json();
              // TODO: call /api/customs/estimate if present, else apply coefficients (PriceDomModes)
              return NextResponse.json({ ok: true, dossierId: `SHIP-${Date.now()}` });
            } catch (e:any) {
              return NextResponse.json({ ok:false, error:e?.message||"bad" }, { status:400 });
            }
          }
          EOF
          # services
          mmk app/api/services/create/route.ts
          cat > app/api/services/create/route.ts << 'EOF'
          import { NextResponse } from "next/server";
          export async function POST(req: Request) {
            try {
              const body = await req.json();
              const notice = process.env.STRIPE_SECRET_KEY ? undefined : "connect_required";
              return NextResponse.json({ ok: true, notice });
            } catch (e:any) {
              return NextResponse.json({ ok:false, error:e?.message||"bad" }, { status:400 });
            }
          }
          EOF
          # jobs
          mmk app/api/jobs/apply/route.ts
          cat > app/api/jobs/apply/route.ts << 'EOF'
          import { NextResponse } from "next/server";
          export async function POST(req: Request) {
            try {
              // for simplicity; multipart handling can be added later
              const body = await req.json();
              return NextResponse.json({ ok: true, applicationId: `JOB-${Date.now()}` });
            } catch (e:any) {
              return NextResponse.json({ ok:false, error:e?.message||"bad" }, { status:400 });
            }
          }
          EOF
          # WhatsApp webhook (stub)
          mmk app/api/whatsapp/webhook/route.ts
          cat > app/api/whatsapp/webhook/route.ts << 'EOF'
          import { NextResponse } from "next/server";
          export async function GET(req: Request) {
            const { searchParams } = new URL(req.url);
            const mode = searchParams.get("hub.mode");
            const token = searchParams.get("hub.verify_token");
            const challenge = searchParams.get("hub.challenge");
            if (mode === "subscribe" && token && challenge && process.env.WA_VERIFY_TOKEN && token === process.env.WA_VERIFY_TOKEN) {
              return new Response(challenge, { status: 200 });
            }
            return NextResponse.json({ ok:false }, { status: 403 });
          }
          export async function POST(req: Request) {
            if (!process.env.WA_ACCESS_TOKEN || !process.env.WA_PHONE_NUMBER_ID) {
              return NextResponse.json({ ok:false, notice:"WA not configured" }, { status: 503 });
            }
            const body = await req.json().catch(()=>({}));
            // TODO: parse messages and reply via Graph API if needed
            return NextResponse.json({ ok:true });
          }
          EOF
          # Telegram webhook (stub)
          mmk app/api/telegram/webhook/route.ts
          cat > app/api/telegram/webhook/route.ts << 'EOF'
          import { NextResponse } from "next/server";
          export async function POST(req: Request) {
            if (!process.env.TELEGRAM_BOT_TOKEN) {
              return NextResponse.json({ ok:false, notice:"TG not configured" }, { status: 503 });
            }
            const body = await req.json().catch(()=>({}));
            // TODO: parse updates and respond
            return NextResponse.json({ ok:true });
          }
          EOF

          echo "== 5) quick_check.sh =="
          if [ ! -f quick_check.sh ]; then
            cat > quick_check.sh << 'EOF'
            #!/usr/bin/env bash
            set -e
            BASE="${1:-http://localhost:3000}"
            echo "# /api/products"; curl -s "$BASE/api/products" | head -c 200 || true; echo
            echo "# /api/customs/estimate"; curl -s -X POST "$BASE/api/customs/estimate" -H 'Content-Type: application/json' -d '{"island":"MQ","family":"high-tech","cif":100,"duty_rate":0.0}' || true; echo
            echo "# /api/sys/returns/health"; curl -s -H "X-Health-Check: ${HEALTH_CHECK_TOKEN:-test}" "$BASE/api/sys/returns/health" || true; echo
          EOF
            chmod +x quick_check.sh
          fi

          echo "== 6) package.json scripts =="
          if [ -f package.json ]; then
            node - <<'EOF'
            const fs=require('fs');
            const p=JSON.parse(fs.readFileSync('package.json','utf8'));
            p.scripts=p.scripts||{};
            if(!p.scripts.build) p.scripts.build="next build";
            fs.writeFileSync('package.json', JSON.stringify(p,null,2));
            console.log('package.json updated.');
            EOF
          fi

      - name: Build (sanity)
        run: |
          npm ci || npm i
          npm run build --if-present

      - name: Commit & Push
        run: |
          set -e
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: IKABAY bootstrap (routes fix, DOM price modes, pages clés, APIs fallback, webhooks stubs, quick_check)"
            git push
          fi